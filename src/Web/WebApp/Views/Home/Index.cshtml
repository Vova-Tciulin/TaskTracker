@model List<GroupVm>

@{
    ViewData["Title"] = "Home Page";
}



<main class="d-flex flex-nowrap ">
  
    <div class="d-flex flex-column flex-shrink-0 p-3 text-bg-dark" style="width: 280px;">
        <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
            <span class="fs-4">Группы</span>
        </a>
        <hr>
        <ul class="nav nav-pills flex-column mb-auto" id="groupsSidebar">
            <li class="nav-item">
                <a class="btn nav-link text-white text-start p-0" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    <p>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                        </svg>
                        <span>создать группу</span>
                    </p>
                </a>
                <div class="collapse" id="collapseExample">
                    <div class="card card-body bg-dark border-0 p-0">
                        <div class="row">
                            <div class="col-md-8">
                                <input required type="text" class="form-control bg-dark text-white border-secondary" id="groupCreateInput" placeholder="Введите название">
                            </div>
                            <div class="col-md-3">
                                <button onclick="createGroup()" class="btn text-white">Создать</button>
                            </div>
                        </div>
                    </div>
                </div>
                <hr>
            </li>
            
            @for (int i=0;i<Model.Count;i++)
            {
                <li class="nav-item" >
                    <a onclick="getGroup('@Model[i].Id')" class="btn nav-link text-white py-2 text-start" id="@Model[i].Id"> @Model[i].Description</a>
                </li>
            }


        </ul>
        <hr>
        <div class="dropdown">
            <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="https://github.com/mdo.png" alt="" width="32" height="32" class="rounded-circle me-2">
                <strong>@User.Identity.Name</strong>
            </a>
            <ul class="dropdown-menu dropdown-menu-dark text-small shadow">
                <li><a class="dropdown-item" href="#">Профиль</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" asp-action="Logout" asp-controller="Account">Выход</a></li>
            </ul>
        </div>
    </div>
    
    <!-- Окно группы -->
    <div class="container-fluid" id="mainContent" style="background-image: url(images/backgroundImg.jpg);background-size:auto 110%; background-repeat: no-repeat;">
        
    </div>
</main>
        
        

<div id="placeholder" hidden>
    
<div class="container-fluid p-0" id="groupInfo">
   
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark border border-2 border-secondary rounded-3 mb-2" style="--bs-border-opacity: .5;">
            
            
            <div class=" collapse navbar-collapse">
                
            </div>
            <ul class="navbar-nav mr-auto">
                <li class="nav-item dropdown text-white">
                    <a class="nav-link dropdown-toggle disabled" href="#"  role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Участники
                    </a>
                    
                </li>
                <li class="nav-item dropdown text-white">
                    <a class="nav-link dropdown-toggle no-caret disabled" href="#"  role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-three-dots text-secondary" viewBox="0 2 16 16">
                            <path d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3"/>
                        </svg>
                        
                    </a>
                  
                </li>
            </ul>
        </nav>

    <div class="row justify-content-center">
        
        <!-- кололнка новых задач -->
        <div class="overflow-auto task-card col-md-3 rounded bg-dark border border-2 border-secondary rounded-3 m-1" style="--bs-border-opacity: .5;">
            <p class="text-white">Нужно сделать</p>
            <!-- карточки -->
            
                <div class="col  my-1 bg-body-dark p-1 border border-2 border-secondary rounded-3" style="--bs-border-opacity: .5;" >
                    <div>
                        <div class="container">
                            <div class="row justify-content-evenly p-0">
                                <div class="col">
                                    <p class="placeholder-glow text-start p-0 col-12">
                                        <span class="col-6 placeholder placeholder-lg bg-light rounded-3"></span>
                                    </p>
                                    
                                </div>
                            </div>
                        </div>
                        
                        <button class="btn mt-2   w-100 h-100" type="button" data-bs-toggle="collapse"  aria-expanded="false" aria-controls="collapseExample">
                            
                            <p class="placeholder-glow text-start p-0 col-12">
                                <span class="col-4 placeholder placeholder-lg bg-light rounded-3"></span>
                            </p>
                            <p class="placeholder-glow text-start p-0 col-12">
                                <span class="col-2 placeholder placeholder-xs bg-light rounded-3"></span>
                            </p>
                        </button>

                    </div>
                    <div>
                        <p class="placeholder-glow text-start p-0 col-12">
                            <span class="col-2 placeholder placeholder-xs bg-light rounded-3"></span>
                        </p>
                        
                    </div>
                </div>
            
            
            <!-- создание карточки -->
            <div class="col  my-1 bg-body-dark p-1 border border-2 border-secondary rounded-3 " style="--bs-border-opacity: .5;">
                <p class="placeholder-glow p-0 m-0">
                    <button  type="button" class="btn p-1 m-0 disabled placeholder">
                        <p class="text-white m-0">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                            </svg>
                            <span>Создать задачу</span>
                        </p>
                    </button>
                    
                </p>
                
            </div>
        </div>

        <!-- колонка задач на выполнении -->
        <div class="col-md-3 task-card rounded bg-dark border border-2 border-secondary rounded-3 m-1 overflow-auto" style="--bs-border-opacity: .5;">
            <p class="text-white">На выполнении</p>
            <!-- карточки -->
            <div class="col  my-1 bg-body-dark p-1 border border-2 border-secondary rounded-3" style="--bs-border-opacity: .5;" >
                <div>
                    <div class="container">
                        <div class="row justify-content-evenly p-0">
                            <div class="col">
                                <p class="placeholder-glow text-start p-0 col-12">
                                    <span class="col-6 placeholder placeholder-lg bg-light rounded-3"></span>
                                </p>
                                                
                            </div>
                        </div>
                    </div>
                                    
                    <button class="btn mt-2   w-100 h-100" type="button" data-bs-toggle="collapse"  aria-expanded="false" aria-controls="collapseExample">
                                        
                        <p class="placeholder-glow text-start p-0 col-12">
                            <span class="col-4 placeholder placeholder-lg bg-light rounded-3"></span>
                        </p>
                        <p class="placeholder-glow text-start p-0 col-12">
                            <span class="col-2 placeholder placeholder-xs bg-light rounded-3"></span>
                        </p>
                    </button>
            
                </div>
                <div>
                    <p class="placeholder-glow text-start p-0 col-12">
                        <span class="col-2 placeholder placeholder-xs bg-light rounded-3"></span>
                    </p>
                                    
                </div>
            </div>
            
        </div>

        <!-- колонка завершенных задач -->
        <div class="overflow-auto task-card col-md-3 rounded bg-dark border border-2 border-secondary rounded-3 m-1 " style="--bs-border-opacity: .5;">
            <p class="text-white">Готово</p>
            
        </div>
    </div>
</div>

</div>

<!-- Окно создания карточки -->
<div class="modal fade" id="createTask" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    
</div>

<!-- Окно обновления карточки -->
<div class="modal fade" id="updateTask" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    
</div>

<!-- Окно создания группы -->
<div class="modal fade" id="createGroup" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    
</div>

<!-- Окно информации о пользователе -->
<div class="modal fade" id="userInfo" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    
</div>

<!-- Окно удаления пользователя из группы-->
<div class="modal fade" id="removeUser" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div>
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Удаления пользователя</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    
                    <div class="form-group">
                        <select name="" id="removeUserDropdown"></select>
                    </div>
                    <input type="hidden" id="groupIdInput" >
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                    <button onclick="removeUser()" class="btn btn-danger">Удалить</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Окно добавления пользователя-->
<div class="modal fade" id="addUser" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div>
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">добавление пользователя</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    
                    <div class="form-group">
                        <input id="inputUserNameOrEmail" class="form-control" placeholder="Email или NickName пользователя">
                    </div>
                    <input type="hidden" id="groupIdaddUser" >
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                    <button onclick="addUser()" class="btn btn-danger">Добавить</button>
                </div>
            </div>
        </div>
    </div>
</div>




<script >

    function addUserShowModal(groupId){
        
        document.getElementById("groupIdaddUser").value = groupId;
        $('#addUser').modal('show');
    }
    
    async function addUser(){
            var groupId=document.getElementById("groupIdaddUser").value;
            var user= document.getElementById("inputUserNameOrEmail").value;
            
           
            const url='@Url.Action("AddUser", "Group")'+`?groupId=${groupId}`+`&user=${user}`;
            
            const response= await fetch(url, {
                        method: 'POST'
            });
            if (response.ok){
                $('#addUser').modal('hide');
                const group = await response.text();           
                document.getElementById('mainContent').innerHTML = group;
                
            }
            else{
                const statusCode = response.status;
                const statusText = await response.text();
                alert(`Error: ${statusCode} - ${statusText}`);
            }
            
        }

    async function removeUser(){
        var groupId=document.getElementById("groupIdInput").value;
        var userId= document.getElementById("removeUserDropdown").value;
        
        console.log(groupId);
        console.log(userId);
        
        const url='@Url.Action("RemoveUser", "Group")'+`?groupId=${groupId}`+`&userId=${userId}`;
        
        const response= await fetch(url, {
                    method: 'DELETE'
                   
        });
        if (response.ok){
            $('#removeUser').modal('hide');
            const group = await response.text();           
            document.getElementById('mainContent').innerHTML = group;
            
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
        
    }

    function removeUserShowModal(users, groupId){
        console.log(users);
        console.log(groupId);
        
        var dropdownElement = document.getElementById("removeUserDropdown");
        
        document.getElementById("groupIdInput").value = groupId;
        var placeholderOption = document.createElement("option");
        placeholderOption.value = ""; 
        placeholderOption.text = "Выберите пользователя";
        placeholderOption.disabled = true; 
        dropdownElement.appendChild(placeholderOption);

            
        for (var i = 0; i < users.length; i++) {
            var optionElement = document.createElement("option");
            optionElement.value = users[i].Id;
            optionElement.text = users[i].NickName;
    
           
            dropdownElement.appendChild(optionElement);
        }
        
        $('#removeUser').modal('show');
        
    }
    
    
    
    async function getGroup(groupId){
       const url='@Url.Action("GetGroup", "Group")'+`?groupId=${groupId}`;
        
       var navItems = document.getElementsByClassName('active');
       for (var i = 0; i < navItems.length; i++) {
           navItems[i].classList.remove('active');
       }
       var btn= document.getElementById(groupId);
       btn.classList.add('active');
                   
       var placeholder= document.getElementById('placeholder');
       placeholder.hidden=false;
       document.getElementById('mainContent').innerHTML=placeholder.innerHTML;
                   
        const response=await fetch(url);
        if (response.ok){
            const group = await response.text();
           
            document.getElementById('mainContent').innerHTML = group;
            placeholder.hidden=true;
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
    }
 
    async function viewUser(user){
        console.log(user);
        const url= '@Url.Action("GetUserInfoView", "Account")';
        const response= await fetch(url, {
            method: 'POST',
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                  userId: user.UserId,
                  nickName: user.NickName,
                  firstName: user.FirstName,
                  lastName: user.LastName
            })
        });
        if (response.ok){
            const userView= await response.text();
            document.getElementById('userInfo').innerHTML = userView;
            $('#userInfo').modal('show');
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
    }
    
    async function createTaskView(groupId){
            const url= '@Url.Action("CreateTask", "Task")'+`?groupId=${groupId}`;
            const response= await fetch(url, {
                method: 'GET'
            });
            if (response.ok){
                const createTaskView= await response.text();
                document.getElementById('createTask').innerHTML = createTaskView;
                $('#createTask').modal('show');
            }
            else{
                const statusCode = response.status;
                const statusText = await response.text();
                alert(`Error: ${statusCode} - ${statusText}`);
            }
    }
    
    async function updateTaskView(groupId){
        const url= '@Url.Action("UpdateTask", "Task")'+`?taskId=${groupId}`;
        const response= await fetch(url, {
            method: 'GET'
        });
        if (response.ok){
            const updateTaskView= await response.text();
            document.getElementById('updateTask').innerHTML = updateTaskView;
            $('#updateTask').modal('show');
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
    }
    async function updateTask(){
        
        var title = document.getElementById("taskUpdateTitleInput").value;
        var description = document.getElementById("taskUpdateDescriptionInput").value;
        var deadline = document.getElementById("taskUpdateDeadlineInput").value;
  
        if (title.trim() === "" && description.trim() === "" && deadline.trim() === "") {
           alert("одно из полей должно быть заполнено!");
           return;
        }
        
        const url= '@Url.Action("UpdateTask", "Task")';
        
        const response= await fetch(url,{
            method: 'POST',
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                taskId: document.getElementById("taskUpdateTaskIdInput").value,
                groupId: document.getElementById("taskUpdateGroupIdInput").value,
                title: title,
                task: description,
                deadLine: deadline,
            })
        });
        
        if (response.ok){
            $('#updateTask').modal('hide')
            const group = await response.text();  
            document.getElementById('mainContent').innerHTML = group;
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
            
                
    }
        
    
    async function createGroup(){
        
        var groupName= document.getElementById('groupCreateInput').value;
        
        if (groupName.trim() === "") {
                   alert("Введите название группы!");
                   return;
        }
        
        const url= '@Url.Action("CreateGroup", "Group")';
        const response= await fetch(url, {
            method: 'POST',
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                description: groupName
            })   
        });
        if (response.ok){
            groupName.value="";
            var collapseElement = document.getElementById("collapseExample");
                if (collapseElement) {
                    collapseElement.classList.remove("show");
                }
                
            var newGroup = await response.json();
            
            console.log(newGroup);
            
            var liElement = document.createElement("li");
            liElement.className = "nav-item";
            
            var aElement = document.createElement("a");
            aElement.className = "btn nav-link text-white py-2 text-start";
            aElement.id = newGroup.id;
            aElement.textContent = newGroup.description;
            aElement.onclick = function() {
                getGroup(newGroup.id);
            };
            liElement.appendChild(aElement);
        
            var ulElement = document.getElementById("groupsSidebar");
            ulElement.appendChild(liElement);
           
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
    }
       
    
            
    async function removeTask(taskId, groupId){
        const url= '@Url.Action("RemoveTask", "Task")'+`?taskId=${taskId}`;
        const response= await fetch(url,{
            method: 'DELETE'    
        });
        if (response.ok){
            const url='@Url.Action("GetGroup", "Group")'+`?groupId=${groupId}`;
            const responseGroup=await fetch(url);
            if (responseGroup.ok){
                const group = await responseGroup.text();
                document.getElementById('mainContent').innerHTML = group;
            }
            else{
                const statusCode = response.status;
                const statusText = await responseGroup.text();
                alert(`Error: ${statusCode} - ${statusText}`);
            }
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
        
    }
    
    async function changeTaskState(taskId, currentState,newState, groupId){
        const url= '@Url.Action("ChangeTaskState", "Task")'+`?taskId=${taskId}`+`&currentState=${currentState}`+`&newState=${newState}`;
        const response= await fetch(url,{
            method: 'PUT'    
        });
        if (response.ok){
            const url='@Url.Action("GetGroup", "Group")'+`?groupId=${groupId}`;
            const responseGroup=await fetch(url);
            if (responseGroup.ok){
                const group = await responseGroup.text();
                document.getElementById('mainContent').innerHTML = group;
            }
            else{
                const statusCode = responseGroup.status;
                const statusText = await responseGroup.text();
                alert(`Error: ${statusCode} - ${statusText}`);
            }
        }  
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
    }
    
    async function removeTask(taskId){
        const url= '@Url.Action("RemoveTask", "Task")'+`?taskId=${taskId}`;
        const response= await fetch(url,{
            method: 'DELETE'    
        });
        if (response.ok){
            const elem= document.getElementById('newTasks');
            const child= document.getElementById('task_'+taskId);
            elem.removeChild(child);
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
    }
    
    async function createTask(){
        
        var title = document.getElementById("taskTitleInput").value;
        var description = document.getElementById("taskDescriptionInput").value;
        var deadline = document.getElementById("taskDeadlineInput").value;
  
        if (title.trim() === "" || description.trim() === "" || deadline.trim() === "") {
           alert("Заполните все поля!");
           return;
        }
        
        const url= '@Url.Action("CreateTask", "Task")';
        
        const response= await fetch(url,{
            method: 'POST',
            headers: { "Accept": "application/json", "Content-Type": "application/json" },
            body: JSON.stringify({
                groupId: document.getElementById('taskGroupIdInput').value,
                title: title,
                task: description,
                deadLine: deadline,
            })
        });
        
        if (response.ok){
            $('#createTask').modal('hide')
            const group = await response.text();  
            document.getElementById('mainContent').innerHTML = group;
            
        }
        else{
            const statusCode = response.status;
            const statusText = await response.text();
            alert(`Error: ${statusCode} - ${statusText}`);
        }
            
                
    }
   
</script>