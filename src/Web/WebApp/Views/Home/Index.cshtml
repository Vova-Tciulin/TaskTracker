@model List<GroupVm>

@{
    ViewData["Title"] = "Home Page";
}



<main class="d-flex flex-nowrap ">
  
    <div class="d-flex flex-column flex-shrink-0 p-3 text-bg-dark" style="width: 280px;">
        <a href="/" class="d-flex align-items-center mb-3 mb-md-0 me-md-auto text-white text-decoration-none">
            
            <span class="fs-4">Группы</span>
        </a>
        <hr>
        <ul class="nav nav-pills flex-column mb-auto">
            <li class="nav-item">
                <a class="btn nav-link text-white text-start p-0" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    <p>
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                        </svg>
                        <span>создать группу</span>
                    </p>
                </a>
                <div class="collapse" id="collapseExample">
                    <div class="card card-body bg-dark border-0 p-0">
                        <input required type="text" class="form-control bg-dark text-white border-secondary" placeholder="Введите название">
                    </div>
                    <button onclick="createGroup()" class="btn text-white">Создать</button>
                </div>
                <hr>
            </li>
            
            @for (int i=0;i<Model.Count;i++)
            {
                <li class="nav-item" >
                    <a onclick="getGroup('@Model[i].Id')" class="btn nav-link text-white py-2 text-start" id="@Model[i].Id"> @Model[i].Description</a>
                </li>
            }


        </ul>
        <hr>
        <div class="dropdown">
            <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="https://github.com/mdo.png" alt="" width="32" height="32" class="rounded-circle me-2">
                <strong>Qrauzeer</strong>
            </a>
            <ul class="dropdown-menu dropdown-menu-dark text-small shadow">
                <li><a class="dropdown-item" href="#">Профиль</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#">Выход</a></li>
            </ul>
        </div>
    </div>
    
    <!-- Окно задач -->
    <div class="container-fluid" id="mainContent" style="background-image: url(images/backgroundImg.jpg);background-size:auto 110%; background-repeat: no-repeat;">
        
    </div>
</main>
        
        

<div class="modal fade" id="createTask" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    
</div>

<!-- Окно информации о карточке -->
<div class="modal fade" id="taskInfo" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-theme="dark">
    
</div>

<!-- Окно создания группы -->
<div class="modal fade" id="createGroup" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    
</div>




<script >
    async function getGroup(groupId){
        const url='@Url.Action("GetGroup", "Group")'+`?groupId=${groupId}`;
        const response=await fetch(url);
        if (response.ok){
            const group = await response.text();
            var navItems = document.getElementsByClassName('active');
            for (var i = 0; i < navItems.length; i++) {
                navItems[i].classList.remove('active');
            }
            var btn= document.getElementById(groupId);
            btn.classList.add('active');
            
            document.getElementById('mainContent').innerHTML = group;
        }
    }
 
    async function createTaskView(groupId){
            const url= '@Url.Action("CreateTask", "Task")'+`?groupId=${groupId}`;
            const response= await fetch(url, {
                method: 'GET'
            });
            if (response.ok){
                const createTaskView= await response.text();
                document.getElementById('createTask').innerHTML = createTaskView;
                $('#createTask').modal('show');
            }
        }
    
    async function createGroup(){
        const url= '@Url.Action("CreateGroup", "Group")';
        const response= await fetch(url, {
            method: 'GET'
        });
        if (response.ok){
            const createGroupView= await response.text();
            document.getElementById('createGroup').innerHTML = createGroupView;
            $('#createGroup').modal('show');
        }           
    }
       
    
            
    async function removeTask(taskId, groupId){
        const url= '@Url.Action("RemoveTask", "Task")'+`?taskId=${taskId}`;
        const response= await fetch(url,{
            method: 'DELETE'    
        });
        if (response.ok){
            const url='@Url.Action("GetGroup", "Group")'+`?groupId=${groupId}`;
            const responseGroup=await fetch(url);
            if (responseGroup.ok){
                const group = await responseGroup.text();
                document.getElementById('mainContent').innerHTML = group;
            }
        }
    }
    
    async function changeTaskState(taskId, currentState, groupId){
        const url= '@Url.Action("ChangeTaskState", "Task")'+`?taskId=${taskId}`+`&currentState=${currentState}`;
        const response= await fetch(url,{
            method: 'PUT'    
        });
        if (response.ok){
            const url='@Url.Action("GetGroup", "Group")'+`?groupId=${groupId}`;
            const responseGroup=await fetch(url);
            if (responseGroup.ok){
                const group = await responseGroup.text();
                document.getElementById('mainContent').innerHTML = group;
            }
        }  
    }
    
   
</script>