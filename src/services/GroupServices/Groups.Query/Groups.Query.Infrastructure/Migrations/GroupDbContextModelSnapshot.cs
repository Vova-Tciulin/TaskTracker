// <auto-generated />
using System;
using Groups.Query.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Groups.Query.Infrastructure.Migrations
{
    [DbContext(typeof(GroupDbContext))]
    partial class GroupDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Groups.Query.Domain.Entities.GroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("Groups.Query.Domain.Entities.GroupTask", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId", "TaskId");

                    b.ToTable("GroupTask", (string)null);
                });

            modelBuilder.Entity("Groups.Query.Domain.Entities.GroupUser", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId", "UserId");

                    b.ToTable("GroupUser", (string)null);
                });

            modelBuilder.Entity("Groups.Query.Domain.Entities.GroupTask", b =>
                {
                    b.HasOne("Groups.Query.Domain.Entities.GroupEntity", null)
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Groups.Query.Domain.Entities.GroupUser", b =>
                {
                    b.HasOne("Groups.Query.Domain.Entities.GroupEntity", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Groups.Query.Domain.Entities.GroupEntity", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
